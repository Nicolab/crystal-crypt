crystal_doc_search_index_callback({"repository_name":"crypt","body":"# Crypt\n\n[![CI Status](https://github.com/Nicolab/crystal-crypt/workflows/CI/badge.svg?branch=master)](https://github.com/Nicolab/crystal-crypt/actions) [![GitHub release](https://img.shields.io/github/release/Nicolab/crystal-crypt.svg)](https://github.com/Nicolab/crystal-crypt/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://nicolab.github.io/crystal-crypt/)\n\nCryptographic utilities made easy for [Crystal lang](https://crystal-lang.org).\n\nThis module provides cryptographic features, with abstractions on top of OpenSSL\nand Crypto (included in the Crystal standard-library).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  crypt:\n    github: nicolab/crystal-crypt\n```\n\n2. Run `shards install`\n\n## Usage\n\nTo optimize the size of the final binary, features are decoupled,\nso each module must be included when you need it.\n\n### OpenSSL Cipher: Encrypt / Decrypt\n\n> [API doc: Crypt::Crypter](https://nicolab.github.io/crystal-crypt/Crypt/Crypter.html)\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/crypter\"\nrequire \"crypt/random\"\n\ndata = \"super secret data\"\nsecret = Crypt.random_string(32)\ncrypter = Crypt::Crypter.new(secret)\n\n# Data encrypted\nencrypted = crypter.encrypt(data)\n\n# Data decrypted\ndecrypted_bytes = crypter.decrypt(encrypted)\n\n# Decrypted data (Bytes)\nputs decrypted_bytes\n\n# Convert Bytes to String\nputs String.new(decrypted_bytes)\n```\n\n#### With signature\n\nEncrypt with a crypto signature:\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/crypter\"\nrequire \"crypt/random\"\n\ndata = \"super secret data\"\nsecret = Crypt.random_string(32)\ncrypter = Crypt::Crypter.new(secret)\n\n# Data encrypted and signed\nencrypted = crypter.encrypt(data, :sign)\n\n# Data verified and decrypted\ndecrypted_bytes = crypter.decrypt(encrypted, :sign)\n\n# Decrypted data (Bytes)\nputs decrypted_bytes\n\n# Convert Bytes to String\nputs String.new(decrypted_bytes)\n```\n\n### Signer\n\nSign and verify given data.\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/signer\"\n\ndata = \"Hello Crystal!\"\nsecret = \"super secret\"\nsigner = Crypt::Signer.new(secret)\n\n# Sign the data\nsigned_data = signer.sign(data)\n\n# => Encoded String, URL and filename safe alphabet (RFC 4648).\nputs signed_data\n\n# Verify the data integrity and get it\nputs signer.verify(signed_data)         # => \"Hello Crystal!\"\nputs signer.verify(signed_data) == data # => true\n```\n\n> [API doc: Crypt::Signer](https://nicolab.github.io/crystal-crypt/Crypt/Signer.html)\n\n### Bcrypt password\n\nGenerate, read and verify `Crypto::Bcrypt` hashes:\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/bcrypt\"\n\npassword = Crypt.create_bcrypt_password(\"super secret\", cost: 10)\n# => $2a$10$rI4xRiuAN2fyiKwynO6PPuorfuoM4L2PVv6hlnVJEmNLjqcibAfHq\n\npassword.verify(\"wrong secret\") # => false\npassword.verify(\"super secret\") # => true\n```\n\n> [API doc: Crypt.create_bcrypt_password](https://nicolab.github.io/crystal-crypt/Crypt.html#create_bcrypt_password)\n\n---\n\nLoads a `Bcrypt` password hash.\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/bcrypt\"\n\npassword = Crypt.load_bcrypt_password(\n  \"$2a$10$X6rw/jDiLBuzHV./JjBNXe8/Po4wTL0fhdDNdAdjcKN/Fup8tGCya\"\n)\npassword.version # => \"2a\"\npassword.salt    # => \"X6rw/jDiLBuzHV./JjBNXe\"\npassword.digest  # => \"8/Po4wTL0fhdDNdAdjcKN/Fup8tGCya\"\n\n# password.verify(\"some secret\")\n```\n\n> [API doc: Crypt.load_bcrypt_password](https://nicolab.github.io/crystal-crypt/Crypt.html#load_bcrypt_password)\n\n### Secure random\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/random\"\n```\n\nSee API doc:\n\n* [API doc: Crypt.random_string](https://nicolab.github.io/crystal-crypt/Crypt.html#random_string)\n* [API doc: Crypt.random_bytes](https://nicolab.github.io/crystal-crypt/Crypt.html#random_bytes)\n* [API doc: Crypt.random_bytes_string](https://nicolab.github.io/crystal-crypt/Crypt.html#random_bytes_string)\n\n### Key derivation\n\nKey derivation PKCS5/PBKDF2 (Password-Based Key Derivation Function 2)\n\n```crystal\nrequire \"crypt\"\nrequire \"crypt/key-deriv\"\nrequire \"crypt/random\"\n\npassword = \"My password\"\nsalt = Crypt.random_string(16)\n\n# key size: 64\nCrypt.key_deriv(password, salt)\n\n# key size: 10\nCrypt.key_deriv(password, salt, key_size: 10)\n\n# iteration: 2000\nCrypt.key_deriv(password, salt, iter: 2000)\n\n# algo: sha256\nCrypt.key_deriv(password, salt, algo: :sha256)\n```\n\n> [API doc: Crypt.key_deriv](https://nicolab.github.io/crystal-crypt/Crypt.html#key_deriv)\n\n## Contributing\n\n1. Fork it (<https://github.com/nicolab/crystal-crypt/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n### Development\n\nOne line:\n\n```sh\n./scripts/develop\n```\n\nor splitted:\n\nTerminal 1:\n\n```sh\ndocker-compose up\n```\n\nTerminal 2:\n\n```sh\n# host\ndocker-compose exec app bash\n\n# container\njust develop\n```\n\nWhen you are done, clean and check the code:\n\n```sh\n# container\njust format\n\n# host\n./scripts/check\n```\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-crypt/blob/master/LICENSE) (c) 2020, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n","program":{"html_id":"crypt/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"crypt","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crypt/Crypt","path":"Crypt.html","kind":"module","full_name":"Crypt","name":"Crypt","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.2\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Crypto utilities.\n\nSee also in complement:\n\n* https://crystal-lang.org/api/OpenSSL/Cipher.html\n* https://crystal-lang.org/api/Crypto/Bcrypt/Password.html\n* https://crystal-lang.org/api/Random/Secure.html\n* https://crystal-lang.org/api/Random.html","summary":"<p>Crypto utilities.</p>","class_methods":[{"id":"check_min_bytesize(min_bytesize:Int,value,name:String=&quot;Value&quot;)-class-method","html_id":"check_min_bytesize(min_bytesize:Int,value,name:String=&quot;Value&quot;)-class-method","name":"check_min_bytesize","doc":"Check the desired minimal *value* bytesize.\nRaises a `BytesizeError` if the *value* bytesize is lesser than *min_bytesize*.\n\n*value* must implements `value.bytesize` (`String` and `Slice` / `Bytes` implements bytesize).\n\n> *name* argument is used to contextualize error message.","summary":"<p>Check the desired minimal <em>value</em> bytesize.</p>","abstract":false,"args":[{"name":"min_bytesize","doc":null,"default_value":"","external_name":"min_bytesize","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"name","doc":null,"default_value":"\"Value\"","external_name":"name","restriction":"String"}],"args_string":"(min_bytesize : Int, value, name : String = <span class=\"s\">&quot;Value&quot;</span>)","source_link":null,"def":{"name":"check_min_bytesize","args":[{"name":"min_bytesize","doc":null,"default_value":"","external_name":"min_bytesize","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"name","doc":null,"default_value":"\"Value\"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.bytesize < min_bytesize\nelse\n  return value\nend\nraise(BytesizeError.new(\"#{name} must be #{min_bytesize} bytes or more characters.\\n      Use `Crypt.random_string(#{min_bytesize})`.\"))\n"}},{"id":"create_bcrypt_password(secret:String,cost:Int32=Crypto::Bcrypt::DEFAULT_COST):Crypto::Bcrypt::Password-class-method","html_id":"create_bcrypt_password(secret:String,cost:Int32=Crypto::Bcrypt::DEFAULT_COST):Crypto::Bcrypt::Password-class-method","name":"create_bcrypt_password","doc":"Create a `Bcrypt` password (`Crypto::Bcrypt::Password`).\nhttps://crystal-lang.org/api/Crypto/Bcrypt/Password.html\n\nGenerate, read and verify `Crypto::Bcrypt` hashes:\n\n```\nrequire \"crypt\"\nrequire \"crypt/bcrypt\"\n\npassword = Crypt.create_bcrypt_password(\"super secret\", cost: 10)\n# => $2a$10$rI4xRiuAN2fyiKwynO6PPuorfuoM4L2PVv6hlnVJEmNLjqcibAfHq\n\npassword.verify(\"wrong secret\") # => false\npassword.verify(\"super secret\") # => true\n```","summary":"<p>Create a <code>Bcrypt</code> password (<code>Crypto::Bcrypt::Password</code>).</p>","abstract":false,"args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"cost","doc":null,"default_value":"Crypto::Bcrypt::DEFAULT_COST","external_name":"cost","restriction":"Int32"}],"args_string":"(secret : String, cost : Int32 = <span class=\"t\">Crypto</span><span class=\"t\">::</span><span class=\"t\">Bcrypt</span><span class=\"t\">::</span><span class=\"t\">DEFAULT_COST</span>) : Crypto::Bcrypt::Password","source_link":null,"def":{"name":"create_bcrypt_password","args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"cost","doc":null,"default_value":"Crypto::Bcrypt::DEFAULT_COST","external_name":"cost","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Crypto::Bcrypt::Password","visibility":"Public","body":"Crypto::Bcrypt::Password.create(secret, cost: cost)"}},{"id":"key_deriv(password,salt,iter=65536,algo:OpenSSL::Algorithm=OpenSSL::Algorithm::SHA1,key_size=64)-class-method","html_id":"key_deriv(password,salt,iter=65536,algo:OpenSSL::Algorithm=OpenSSL::Algorithm::SHA1,key_size=64)-class-method","name":"key_deriv","doc":"Key derivation PKCS5/PBKDF2 (Password-Based Key Derivation Function 2).\n\n* https://crystal-lang.org/api/OpenSSL/HMAC.html\n* https://en.wikipedia.org/wiki/PBKDF2","summary":"<p>Key derivation PKCS5/PBKDF2 (Password-Based Key Derivation Function 2).</p>","abstract":false,"args":[{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":""},{"name":"salt","doc":null,"default_value":"","external_name":"salt","restriction":""},{"name":"iter","doc":null,"default_value":"65536","external_name":"iter","restriction":""},{"name":"algo","doc":null,"default_value":"OpenSSL::Algorithm::SHA1","external_name":"algo","restriction":"OpenSSL::Algorithm"},{"name":"key_size","doc":null,"default_value":"64","external_name":"key_size","restriction":""}],"args_string":"(password, salt, iter = <span class=\"n\">65536</span>, algo : OpenSSL::Algorithm = <span class=\"t\">OpenSSL</span><span class=\"t\">::</span><span class=\"t\">Algorithm</span><span class=\"t\">::</span><span class=\"t\">SHA1</span>, key_size = <span class=\"n\">64</span>)","source_link":null,"def":{"name":"key_deriv","args":[{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":""},{"name":"salt","doc":null,"default_value":"","external_name":"salt","restriction":""},{"name":"iter","doc":null,"default_value":"65536","external_name":"iter","restriction":""},{"name":"algo","doc":null,"default_value":"OpenSSL::Algorithm::SHA1","external_name":"algo","restriction":"OpenSSL::Algorithm"},{"name":"key_size","doc":null,"default_value":"64","external_name":"key_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"OpenSSL::PKCS5.pbkdf2_hmac(self.check_min_bytesize(6, password, \"Password\"), self.check_min_bytesize(8, salt, \"Salt\"), iter, algo, key_size)"}},{"id":"key_deriv(password,salt,iter=65536,algo:Symbol=:sha1,key_size=64)-class-method","html_id":"key_deriv(password,salt,iter=65536,algo:Symbol=:sha1,key_size=64)-class-method","name":"key_deriv","doc":"See `key_deriv`.\n\nArgument *algo* takes a `Symbol` instead of `OpenSSL::Algorithm` (`Enum`).\n> :md4, :md5, :ripemd160, :sha1, :sha224, :sha256, :sha384, :sha512","summary":"<p>See <code><a href=\"Crypt.html#key_deriv(password,salt,iter=65536,algo:OpenSSL::Algorithm=OpenSSL::Algorithm::SHA1,key_size=64)-class-method\">.key_deriv</a></code>.</p>","abstract":false,"args":[{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":""},{"name":"salt","doc":null,"default_value":"","external_name":"salt","restriction":""},{"name":"iter","doc":null,"default_value":"65536","external_name":"iter","restriction":""},{"name":"algo","doc":null,"default_value":":sha1","external_name":"algo","restriction":"Symbol"},{"name":"key_size","doc":null,"default_value":"64","external_name":"key_size","restriction":""}],"args_string":"(password, salt, iter = <span class=\"n\">65536</span>, algo : Symbol = <span class=\"n\">:sha1</span>, key_size = <span class=\"n\">64</span>)","source_link":null,"def":{"name":"key_deriv","args":[{"name":"password","doc":null,"default_value":"","external_name":"password","restriction":""},{"name":"salt","doc":null,"default_value":"","external_name":"salt","restriction":""},{"name":"iter","doc":null,"default_value":"65536","external_name":"iter","restriction":""},{"name":"algo","doc":null,"default_value":":sha1","external_name":"algo","restriction":"Symbol"},{"name":"key_size","doc":null,"default_value":"64","external_name":"key_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n    case algo\n    {% for algo_name in [\"MD4\", \"MD5\", \"RIPEMD160\", \"SHA1\", \"SHA224\", \"SHA256\", \"SHA384\", \"SHA512\"] %}\n    when :{{ algo_name.downcase.id }}\n      algo = OpenSSL::Algorithm::{{ algo_name.id }}\n    {% end %}\n    else\n      raise CryptError.new(\n        \"#{algo} algorithm not supported.\n        See https://crystal-lang.org/api/#{Crystal::VERSION}/OpenSSL/Algorithm.html\"\n      )\n    end\n    {% end %}\nself.key_deriv(password, salt, iter, algo, key_size)\n"}},{"id":"load_bcrypt_password(hash:String):Crypto::Bcrypt::Password-class-method","html_id":"load_bcrypt_password(hash:String):Crypto::Bcrypt::Password-class-method","name":"load_bcrypt_password","doc":"Loads a `Bcrypt` password hash.\n\n```\nrequire \"crypt\"\nrequire \"crypt/bcrypt\"\n\npassword = Crypt.load_bcrypt_password(\n  \"$2a$10$X6rw/jDiLBuzHV./JjBNXe8/Po4wTL0fhdDNdAdjcKN/Fup8tGCya\"\n)\npassword.version # => \"2a\"\npassword.salt    # => \"X6rw/jDiLBuzHV./JjBNXe\"\npassword.digest  # => \"8/Po4wTL0fhdDNdAdjcKN/Fup8tGCya\"\n```","summary":"<p>Loads a <code>Bcrypt</code> password hash.</p>","abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"String"}],"args_string":"(hash : String) : Crypto::Bcrypt::Password","source_link":null,"def":{"name":"load_bcrypt_password","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Crypto::Bcrypt::Password","visibility":"Public","body":"Crypto::Bcrypt::Password.new(hash)"}},{"id":"random_bytes(n:Int=16):Bytes-class-method","html_id":"random_bytes(n:Int=16):Bytes-class-method","name":"random_bytes","doc":"Generates a slice filled with *n* random bytes.\n* https://crystal-lang.org/api/Random.html#random_bytes(n:Int=16):Bytes-instance-method\n\nSee also:\n\n* `random_string`\n* `random_bytes_string`","summary":"<p>Generates a slice filled with <em>n</em> random bytes.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"16","external_name":"n","restriction":"Int"}],"args_string":"(n : Int = <span class=\"n\">16</span>) : Bytes","source_link":null,"def":{"name":"random_bytes","args":[{"name":"n","doc":null,"default_value":"16","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"Random::Secure.random_bytes(n)"}},{"id":"random_bytes_string(n:Int=16):String-class-method","html_id":"random_bytes_string(n:Int=16):String-class-method","name":"random_bytes_string","doc":"Generates a string whose size is *n* bytes.\nBe careful the string generated contains more characters than *n*, but size is *n* bytes.\n\n```\nstr = Crypt.random_bytes_string(4) # => \"\\u001DF\\xD4\\u000E\"\nstr.bytesize                       # => 4\nstr.to_slice                       # => Bytes[195, 219, 187, 142]\n```\n\nSee also:\n\n* `random_bytes`\n* `random_string`","summary":"<p>Generates a string whose size is <em>n</em> bytes.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"16","external_name":"n","restriction":"Int"}],"args_string":"(n : Int = <span class=\"n\">16</span>) : String","source_link":null,"def":{"name":"random_bytes_string","args":[{"name":"n","doc":null,"default_value":"16","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.new(Random::Secure.random_bytes(n))"}},{"id":"random_string(n:Int=16):String-class-method","html_id":"random_string(n:Int=16):String-class-method","name":"random_string","doc":"Generates a string filled with *n* random characters.\nThe string generated is URL and filename safe alphabet (RFC 4648).\nThe alphabet uses `'-'` instead of `'+'` and `'_'` instead of `'/'`.\n\n# See also:\n\n* `random_bytes`\n* `random_bytes_string`","summary":"<p>Generates a string filled with <em>n</em> random characters.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"16","external_name":"n","restriction":"Int"}],"args_string":"(n : Int = <span class=\"n\">16</span>) : String","source_link":null,"def":{"name":"random_string","args":[{"name":"n","doc":null,"default_value":"16","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(Random::Secure.urlsafe_base64(n, padding: false))[0, n]"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crypt/Crypt/BytesizeError","path":"Crypt/BytesizeError.html","kind":"class","full_name":"Crypt::BytesizeError","name":"BytesizeError","abstract":false,"superclass":{"html_id":"crypt/Crypt/CryptError","kind":"class","full_name":"Crypt::CryptError","name":"CryptError"},"ancestors":[{"html_id":"crypt/Crypt/CryptError","kind":"class","full_name":"Crypt::CryptError","name":"CryptError"},{"html_id":"crypt/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crypt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crypt/Crypt","kind":"module","full_name":"Crypt","name":"Crypt"},"doc":"Raised when an error has occurred with a signature.","summary":"<p>Raised when an error has occurred with a signature.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crypt/Crypt/Crypter","path":"Crypt/Crypter.html","kind":"class","full_name":"Crypt::Crypter","name":"Crypter","abstract":false,"superclass":{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crypt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crypt/Crypt","kind":"module","full_name":"Crypt","name":"Crypt"},"doc":"Encrypt / Decrypt using OpenSSL Cipher.\nSee https://crystal-lang.org/api/OpenSSL/Cipher.html","summary":"<p>Encrypt / Decrypt using OpenSSL Cipher.</p>","class_methods":[],"constructors":[{"id":"new(secret:String,digest=:sha1,cipher_algo=&quot;aes-256-cbc&quot;)-class-method","html_id":"new(secret:String,digest=:sha1,cipher_algo=&quot;aes-256-cbc&quot;)-class-method","name":"new","doc":"Creates a new `Crypter` instance.","summary":"<p>Creates a new <code><a href=\"../Crypt/Crypter.html\">Crypter</a></code> instance.</p>","abstract":false,"args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""},{"name":"cipher_algo","doc":null,"default_value":"\"aes-256-cbc\"","external_name":"cipher_algo","restriction":""}],"args_string":"(secret : String, digest = <span class=\"n\">:sha1</span>, cipher_algo = <span class=\"s\">&quot;aes-256-cbc&quot;</span>)","source_link":null,"def":{"name":"new","args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""},{"name":"cipher_algo","doc":null,"default_value":"\"aes-256-cbc\"","external_name":"cipher_algo","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(secret, digest, cipher_algo)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"cipher_decrypt(value:Bytes):Bytes-instance-method","html_id":"cipher_decrypt(value:Bytes):Bytes-instance-method","name":"cipher_decrypt","doc":"Decrypt *value* encrypted by `cipher_encrypt`.","summary":"<p>Decrypt <em>value</em> encrypted by <code><a href=\"../Crypt/Crypter.html#cipher_encrypt(value):Bytes-instance-method\">#cipher_encrypt</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"args_string":"(value : Bytes) : Bytes","source_link":null,"def":{"name":"cipher_decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher = OpenSSL::Cipher.new(@cipher_algo)\ndata = value[0, value.size - @block_size]\niv = value[value.size - @block_size, @block_size]\ncipher.decrypt\nset_cipher_key(cipher)\ncipher.iv = iv\ndecrypted_data = IO::Memory.new\ndecrypted_data.write(cipher.update(data))\ndecrypted_data.write(cipher.final)\ndecrypted_data.to_slice\n"}},{"id":"cipher_encrypt(value):Bytes-instance-method","html_id":"cipher_encrypt(value):Bytes-instance-method","name":"cipher_encrypt","doc":"Encrypt the *value* which should be decrypted by `cipher_decrypt`.\nSee also `encrypt`, `encrypt_and_sign`.","summary":"<p>Encrypt the <em>value</em> which should be decrypted by <code><a href=\"../Crypt/Crypter.html#cipher_decrypt(value:Bytes):Bytes-instance-method\">#cipher_decrypt</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bytes","source_link":null,"def":{"name":"cipher_encrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher = OpenSSL::Cipher.new(@cipher_algo)\ncipher.encrypt\nset_cipher_key(cipher)\niv = cipher.random_iv\nencrypted_data = IO::Memory.new\nencrypted_data.write(cipher.update(value))\nencrypted_data.write(cipher.final)\nencrypted_data.write(iv)\nencrypted_data.to_slice\n"}},{"id":"decrypt(value:Bytes,kind:Symbol,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","html_id":"decrypt(value:Bytes,kind:Symbol,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","name":"decrypt","doc":"Equivalent to `verify_and_decrypt`, just a shortcut.","summary":"<p>Equivalent to <code><a href=\"../Crypt/Crypter.html#verify_and_decrypt(value:String,sign_error=Signer::INVALID_SIGN):Bytes-instance-method\">#verify_and_decrypt</a></code>, just a shortcut.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"args_string":"(value : Bytes, kind : Symbol, sign_error = <span class=\"t\">Signer</span><span class=\"t\">::</span><span class=\"t\">INVALID_SIGN</span>) : Bytes","source_link":null,"def":{"name":"decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"check_kind(kind, :sign)\nverify_and_decrypt(value, sign_error)\n"}},{"id":"decrypt(value:String,kind:Symbol,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","html_id":"decrypt(value:String,kind:Symbol,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","name":"decrypt","doc":"Equivalent to `verify_and_decrypt`, just a shortcut.","summary":"<p>Equivalent to <code><a href=\"../Crypt/Crypter.html#verify_and_decrypt(value:String,sign_error=Signer::INVALID_SIGN):Bytes-instance-method\">#verify_and_decrypt</a></code>, just a shortcut.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"args_string":"(value : String, kind : Symbol, sign_error = <span class=\"t\">Signer</span><span class=\"t\">::</span><span class=\"t\">INVALID_SIGN</span>) : Bytes","source_link":null,"def":{"name":"decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"check_kind(kind, :sign)\nverify_and_decrypt(value, sign_error)\n"}},{"id":"decrypt(value:Bytes):Bytes-instance-method","html_id":"decrypt(value:Bytes):Bytes-instance-method","name":"decrypt","doc":"Equivalent to `cipher_decrypt`, just a shortcut.","summary":"<p>Equivalent to <code><a href=\"../Crypt/Crypter.html#cipher_decrypt(value:Bytes):Bytes-instance-method\">#cipher_decrypt</a></code>, just a shortcut.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"args_string":"(value : Bytes) : Bytes","source_link":null,"def":{"name":"decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher_decrypt(value)"}},{"id":"encrypt(value:Bytes,kind:Symbol):String-instance-method","html_id":"encrypt(value:Bytes,kind:Symbol):String-instance-method","name":"encrypt","doc":"Equivalent to `encrypt_and_sign`, just a shortcut.","summary":"<p>Equivalent to <code><a href=\"../Crypt/Crypter.html#encrypt_and_sign(value:Bytes):String-instance-method\">#encrypt_and_sign</a></code>, just a shortcut.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"}],"args_string":"(value : Bytes, kind : Symbol) : String","source_link":null,"def":{"name":"encrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"check_kind(kind, :sign)\nencrypt_and_sign(value)\n"}},{"id":"encrypt(value:String,kind:Symbol):String-instance-method","html_id":"encrypt(value:String,kind:Symbol):String-instance-method","name":"encrypt","doc":"Equivalent to `encrypt_and_sign`, just a shortcut.","summary":"<p>Equivalent to <code><a href=\"../Crypt/Crypter.html#encrypt_and_sign(value:Bytes):String-instance-method\">#encrypt_and_sign</a></code>, just a shortcut.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"}],"args_string":"(value : String, kind : Symbol) : String","source_link":null,"def":{"name":"encrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"check_kind(kind, :sign)\nencrypt_and_sign(value)\n"}},{"id":"encrypt(value):Bytes-instance-method","html_id":"encrypt(value):Bytes-instance-method","name":"encrypt","doc":"Equivalent to `cipher_encrypt`, just a shortcut.","summary":"<p>Equivalent to <code><a href=\"../Crypt/Crypter.html#cipher_encrypt(value):Bytes-instance-method\">#cipher_encrypt</a></code>, just a shortcut.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bytes","source_link":null,"def":{"name":"encrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher_encrypt(value)"}},{"id":"encrypt_and_sign(value:Bytes):String-instance-method","html_id":"encrypt_and_sign(value:Bytes):String-instance-method","name":"encrypt_and_sign","doc":"Encrypt and sign a *value*. We need to sign the *value* in order to avoid\npadding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.","summary":"<p>Encrypt and sign a <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"args_string":"(value : Bytes) : String","source_link":null,"def":{"name":"encrypt_and_sign","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"signer.sign(encrypt(value))"}},{"id":"encrypt_and_sign(value:String):String-instance-method","html_id":"encrypt_and_sign(value:String):String-instance-method","name":"encrypt_and_sign","doc":"Encrypt and sign a *value*. We need to sign the *value* in order to avoid\npadding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.","summary":"<p>Encrypt and sign a <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : String","source_link":null,"def":{"name":"encrypt_and_sign","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"encrypt_and_sign(value.to_slice)"}},{"id":"signer:Signer-instance-method","html_id":"signer:Signer-instance-method","name":"signer","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Signer","source_link":null,"def":{"name":"signer","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Signer","visibility":"Public","body":"@signer"}},{"id":"verify_and_decrypt(value:String,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","html_id":"verify_and_decrypt(value:String,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","name":"verify_and_decrypt","doc":"Verify and decrypt a signed *value*. We need to verify the *value* in order to\navoid padding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.","summary":"<p>Verify and decrypt a signed <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"args_string":"(value : String, sign_error = <span class=\"t\">Signer</span><span class=\"t\">::</span><span class=\"t\">INVALID_SIGN</span>) : Bytes","source_link":null,"def":{"name":"verify_and_decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher_decrypt(signer.verify_raw(value, sign_error))"}},{"id":"verify_and_decrypt(value:Bytes,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","html_id":"verify_and_decrypt(value:Bytes,sign_error=Signer::INVALID_SIGN):Bytes-instance-method","name":"verify_and_decrypt","doc":"Verify and decrypt a signed *value*. We need to verify the *value* in order to\navoid padding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.","summary":"<p>Verify and decrypt a signed <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"args_string":"(value : Bytes, sign_error = <span class=\"t\">Signer</span><span class=\"t\">::</span><span class=\"t\">INVALID_SIGN</span>) : Bytes","source_link":null,"def":{"name":"verify_and_decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"},{"name":"sign_error","doc":null,"default_value":"Signer::INVALID_SIGN","external_name":"sign_error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher_decrypt(signer.verify_raw(value, sign_error))"}}],"macros":[],"types":[]},{"html_id":"crypt/Crypt/CryptError","path":"Crypt/CryptError.html","kind":"class","full_name":"Crypt::CryptError","name":"CryptError","abstract":false,"superclass":{"html_id":"crypt/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"crypt/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crypt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"crypt/Crypt/BytesizeError","kind":"class","full_name":"Crypt::BytesizeError","name":"BytesizeError"},{"html_id":"crypt/Crypt/SecretKeyError","kind":"class","full_name":"Crypt::SecretKeyError","name":"SecretKeyError"},{"html_id":"crypt/Crypt/SignatureError","kind":"class","full_name":"Crypt::SignatureError","name":"SignatureError"}],"including_types":[],"namespace":{"html_id":"crypt/Crypt","kind":"module","full_name":"Crypt","name":"Crypt"},"doc":"Generic Crypt's Error.\nInherited by all Crypt's exception classes.","summary":"<p>Generic Crypt's Error.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crypt/Crypt/SecretKeyError","path":"Crypt/SecretKeyError.html","kind":"class","full_name":"Crypt::SecretKeyError","name":"SecretKeyError","abstract":false,"superclass":{"html_id":"crypt/Crypt/CryptError","kind":"class","full_name":"Crypt::CryptError","name":"CryptError"},"ancestors":[{"html_id":"crypt/Crypt/CryptError","kind":"class","full_name":"Crypt::CryptError","name":"CryptError"},{"html_id":"crypt/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crypt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crypt/Crypt","kind":"module","full_name":"Crypt","name":"Crypt"},"doc":"Raised when an error has occurred with a secret key.","summary":"<p>Raised when an error has occurred with a secret key.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crypt/Crypt/SignatureError","path":"Crypt/SignatureError.html","kind":"class","full_name":"Crypt::SignatureError","name":"SignatureError","abstract":false,"superclass":{"html_id":"crypt/Crypt/CryptError","kind":"class","full_name":"Crypt::CryptError","name":"CryptError"},"ancestors":[{"html_id":"crypt/Crypt/CryptError","kind":"class","full_name":"Crypt::CryptError","name":"CryptError"},{"html_id":"crypt/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crypt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crypt/Crypt","kind":"module","full_name":"Crypt","name":"Crypt"},"doc":"Raised when an error has occurred with a signature.","summary":"<p>Raised when an error has occurred with a signature.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crypt/Crypt/Signer","path":"Crypt/Signer.html","kind":"class","full_name":"Crypt::Signer","name":"Signer","abstract":false,"superclass":{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crypt/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crypt/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"crypt","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"INVALID_SIGN","name":"INVALID_SIGN","value":"\"Not valid\"","doc":null,"summary":null},{"id":"SIGN_SEP","name":"SIGN_SEP","value":"\"__--\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crypt/Crypt","kind":"module","full_name":"Crypt","name":"Crypt"},"doc":"Sign and verify given data.","summary":"<p>Sign and verify given data.</p>","class_methods":[{"id":"parse_data_and_digest(signed_data):Tuple(String,String)-class-method","html_id":"parse_data_and_digest(signed_data):Tuple(String,String)-class-method","name":"parse_data_and_digest","doc":null,"summary":null,"abstract":false,"args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":""}],"args_string":"(signed_data) : Tuple(String, String)","source_link":null,"def":{"name":"parse_data_and_digest","args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(String, String)","visibility":"Public","body":"begin\n  digest, data = signed_data.split(SIGN_SEP, 2)\n  {data, digest}\nrescue e\n  raise(SignatureError.new(\"#{e.class}: #{e.message}\"))\nend"}}],"constructors":[{"id":"new(secret:String,digest=:sha1)-class-method","html_id":"new(secret:String,digest=:sha1)-class-method","name":"new","doc":"Create a `Signer` instance.","summary":"<p>Create a <code><a href=\"../Crypt/Signer.html\">Signer</a></code> instance.</p>","abstract":false,"args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""}],"args_string":"(secret : String, digest = <span class=\"n\">:sha1</span>)","source_link":null,"def":{"name":"new","args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(secret, digest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"sign(value:String|Bytes):String-instance-method","html_id":"sign(value:String|Bytes):String-instance-method","name":"sign","doc":"Generates signed data.\nReturns an URL and filename safe alphabet (RFC 4648).","summary":"<p>Generates signed data.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Bytes"}],"args_string":"(value : String | Bytes) : String","source_link":null,"def":{"name":"sign","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"data = encode(value)\n\"#{digest_and_encode(data)}#{SIGN_SEP}#{data}\"\n"}},{"id":"valid?(data,digest):Bool-instance-method","html_id":"valid?(data,digest):Bool-instance-method","name":"valid?","doc":"Compare *data* and *digest*.","summary":"<p>Compare <em>data</em> and <em>digest</em>.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"digest","doc":null,"default_value":"","external_name":"digest","restriction":""}],"args_string":"(data, digest) : Bool","source_link":null,"def":{"name":"valid?","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"digest","doc":null,"default_value":"","external_name":"digest","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(data.size > 0 && digest.size > 0) && (Crypto::Subtle.constant_time_compare(digest, digest_and_encode(data)))"}},{"id":"verify(signed_data,error_message=INVALID_SIGN):String-instance-method","html_id":"verify(signed_data,error_message=INVALID_SIGN):String-instance-method","name":"verify","doc":"Verify and decode.\n*error_message* allows to customize the error message when the signature is not valid.","summary":"<p>Verify and decode.</p>","abstract":false,"args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":""},{"name":"error_message","doc":null,"default_value":"INVALID_SIGN","external_name":"error_message","restriction":""}],"args_string":"(signed_data, error_message = <span class=\"t\">INVALID_SIGN</span>) : String","source_link":null,"def":{"name":"verify","args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":""},{"name":"error_message","doc":null,"default_value":"INVALID_SIGN","external_name":"error_message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(verify_and_decode(signed_data)) || (raise(SignatureError.new(error_message)))"}},{"id":"verify_and_decode(signed_data:String):String?-instance-method","html_id":"verify_and_decode(signed_data:String):String?-instance-method","name":"verify_and_decode","doc":"Verify and decode.\n\n> It is recommended to use `verify` which has a more\n  precise return (returns `String` or raises a `SignatureError`).","summary":"<p>Verify and decode.</p>","abstract":false,"args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":"String"}],"args_string":"(signed_data : String) : String?","source_link":null,"def":{"name":"verify_and_decode","args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"begin\n  begin\n    data, digest = Signer.parse_data_and_digest(signed_data)\n  rescue\n    return nil\n  end\n  if valid?(data, digest)\n    String.new(decode(data))\n  end\nrescue arg_error : ArgumentError\n  if arg_error.message =~ (/invalid base64/)\n    return\n  end\n  raise(SignatureError.new(\"#{arg_error.class}: #{arg_error.message}\"))\nend"}},{"id":"verify_raw(signed_data:String,error_message=INVALID_SIGN):Bytes-instance-method","html_id":"verify_raw(signed_data:String,error_message=INVALID_SIGN):Bytes-instance-method","name":"verify_raw","doc":"Verify and decode.\n*error_message* allows to customize the error message when the signature is not valid.\n\n> This method can produce a different error message than *error_message*.","summary":"<p>Verify and decode.</p>","abstract":false,"args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":"String"},{"name":"error_message","doc":null,"default_value":"INVALID_SIGN","external_name":"error_message","restriction":""}],"args_string":"(signed_data : String, error_message = <span class=\"t\">INVALID_SIGN</span>) : Bytes","source_link":null,"def":{"name":"verify_raw","args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":"String"},{"name":"error_message","doc":null,"default_value":"INVALID_SIGN","external_name":"error_message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"data, digest = Signer.parse_data_and_digest(signed_data)\nif valid?(data, digest)\n  return decode(data)\nend\nraise(SignatureError.new(error_message))\n"}},{"id":"verify_raw(signed_data:Bytes,error_message=INVALID_SIGN):Bytes-instance-method","html_id":"verify_raw(signed_data:Bytes,error_message=INVALID_SIGN):Bytes-instance-method","name":"verify_raw","doc":"Verify and decode.\n*error_message* allows to customize the error message when the signature is not valid.\n\n> This method can produce a different error message than *error_message*.","summary":"<p>Verify and decode.</p>","abstract":false,"args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":"Bytes"},{"name":"error_message","doc":null,"default_value":"INVALID_SIGN","external_name":"error_message","restriction":""}],"args_string":"(signed_data : Bytes, error_message = <span class=\"t\">INVALID_SIGN</span>) : Bytes","source_link":null,"def":{"name":"verify_raw","args":[{"name":"signed_data","doc":null,"default_value":"","external_name":"signed_data","restriction":"Bytes"},{"name":"error_message","doc":null,"default_value":"INVALID_SIGN","external_name":"error_message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"verify_raw(String.new(signed_data), error_message)"}}],"macros":[],"types":[]}]}]}})